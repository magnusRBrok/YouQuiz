{"version":3,"sources":["hooks/useColors.ts","components/buttons/colorModeBtn.tsx","components/header/navbar.tsx","components/header/header.tsx","components/layouts/basicLayout.tsx","stores/quizStore.ts","components/quiz/optionComponent.tsx","components/quiz/questionComponent.tsx","components/quiz/quizCompletion.tsx","components/quiz/quizComponent.tsx","pages/QuizPage.tsx","pages/NotFoundPage.tsx","components/quiz/QuizSelection/quizSelectionItem.tsx","components/quiz/QuizSelection/quizSelection.tsx","pages/HomePage.tsx","App.tsx","reportWebVitals.ts","theme.ts","index.tsx"],"names":["useColors","headerBg","useColorModeValue","optionBg","optionBgHover","optionCorrect","optionIncorrect","primaryColorHover","ColorModeBtn","toggleColorMode","useColorMode","icon","aria-label","size","onClick","rounded","NavBar","children","spacing","to","Header","bg","maxW","p","justifyContent","paddingX","py","BasicLayout","QuizStore","quizes","quizSession","makeObservable","this","observable","addQuiz","action","getQuiz","newQuizSession","answerQuestion","correctAnswers","computed","quiz","push","id","find","userId","answers","Map","question","answer","set","Array","from","values","reduce","acc","isCorrect","title","category","description","createdBy","questions","options","text","Option","option","i","alphabet","map","e","x","String","fromCharCode","bgColor","useMemo","_hover","backgroundColor","fontWeight","direction","QuestionComponent","observer","get","handleAnswer","useCallback","QuizCompletion","questionAmount","quizName","align","mt","QuizComponent","useEffect","useState","setQuestion","currentQuestionIndex","findIndex","q","isQuizCompleted","setIsQuizCompleted","showCompletePage","setShowCompletePage","changeQuestion","index","length","QuizPage","quizId","useParams","console","log","NotFoundPage","QuizSelectionItem","cursor","width","h","m","borderRadius","boxShadow","borderColor","QuizSelection","height","minChildWidth","Home","App","document","exact","path","component","HomePage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4877a004.chunk.js","sourcesContent":["import { useColorModeValue } from \"@chakra-ui/react\";\n\nexport const useColors = () => {\n  const headerBg = useColorModeValue(\"gray.200\", \"gray.700\");\n  const optionBg = useColorModeValue(\"gray.200\", \"gray.700\");\n  const optionBgHover = useColorModeValue(\"gray.300\", \"gray.800\");\n  const optionCorrect = useColorModeValue(\"green.400\", \"green.600\");\n  const optionIncorrect = useColorModeValue(\"red.400\", \"red.600\");\n    const primaryColorHover = useColorModeValue(\"gray.100\", \"grey.700\");\n\n  return {\n    headerBg,\n    optionBg,\n    optionBgHover,\n    optionCorrect,\n    optionIncorrect,\n    primaryColorHover,\n  };\n};\n","import { IconButton } from \"@chakra-ui/button\";\nimport { useColorMode, useColorModeValue } from \"@chakra-ui/color-mode\";\nimport { FC } from \"react\";\nimport { BiMoon, BiSun } from \"react-icons/bi\";\n\nconst ColorModeBtn: FC = () => {\n  const { toggleColorMode } = useColorMode();\n  const icon = useColorModeValue(<BiMoon />, <BiSun />);\n\n  return (\n    <IconButton\n      aria-label=\"Switch color mode\"\n      size=\"sm\"\n      icon={icon}\n      onClick={toggleColorMode}\n      rounded=\"full\"\n    />\n  );\n};\n\nexport default ColorModeBtn;\n","import { HStack, Text } from '@chakra-ui/layout';\r\nimport { Link } from 'react-router-dom';\r\nimport { FC } from 'react';\r\n\r\nconst NavBar: FC = ({ children }) => {\r\n\r\n    return (\r\n        <nav>\r\n            <HStack spacing={5}>\r\n                {/* TODO: Actual navigation links */}\r\n                <Link to={\"/\"} ><Text>Home</Text></Link>\r\n                <Link to={\"/quiz\"}><Text>Start Quiz</Text></Link>\r\n                {/* <Link>Link</Link> */}\r\n            </HStack>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import { Box, Container, Flex, Heading, HStack } from \"@chakra-ui/layout\";\r\nimport { FC } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useColors } from \"../../hooks/useColors\";\r\nimport ColorModeBtn from \"../buttons/colorModeBtn\";\r\nimport NavBar from \"./navbar\";\r\n\r\nconst Header: FC = ({ children }) => {\r\n  const appName = \"YouQuiz\";\r\n  const { headerBg } = useColors();\r\n\r\n  return (\r\n    <header>\r\n      <Box bg={headerBg}>\r\n        <Container maxW=\"container.lg\" p={0}>\r\n          <Flex justifyContent=\"space-between\" paddingX={[2, 5, 10]} py={3}>\r\n            <HStack spacing={10}>\r\n              <Link to=\"/\"><Heading size=\"md\">{appName}</Heading></Link>\r\n              <NavBar />\r\n            </HStack>\r\n            <ColorModeBtn />\r\n          </Flex>\r\n        </Container>\r\n      </Box>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { Box, Container } from \"@chakra-ui/layout\";\nimport { FC } from \"react\";\nimport Header from \"../header/header\";\n\nconst BasicLayout: FC = ({ children }) => {\n  return (\n    <Box>\n      <Header />\n      <Container maxW=\"container.lg\" p={0}>\n        <Box p={[2, 5, 10]}>\n          <main>{children}</main>\n        </Box>\n      </Container>\n    </Box>\n  );\n};\n\nexport default BasicLayout;\n","import { makeObservable, observable, action, computed } from \"mobx\";\nimport { QuestionOption } from \"../model/questionOption\";\nimport { Question } from \"../model/question\";\nimport { Quiz } from \"../model/quiz\";\nimport { QuizSession } from \"../model/quizSession\";\n\nexport class QuizStoreImpl {\n  quizes: Quiz[] = [];\n  quizSession: QuizSession | undefined;\n\n  constructor() {\n    makeObservable(this, {\n      quizes: observable,\n      quizSession: observable,\n      addQuiz: action,\n      getQuiz: action,\n      newQuizSession: action,\n      answerQuestion: action,\n      correctAnswers: computed,\n    });\n  }\n\n  addQuiz(quiz: Quiz) {\n    this.quizes.push(quiz);\n  }\n\n  getQuiz(id: number) {\n    return this.quizes.find((quiz) => quiz.id === id);\n  }\n\n  newQuizSession(quiz: Quiz) {\n    this.quizSession = {\n      userId: 1,\n      quiz: quiz,\n      answers: new Map<Question, QuestionOption>(),\n    };\n  }\n\n  answerQuestion(question: Question, answer: QuestionOption) {\n    this.quizSession?.answers.set(question, answer);\n  }\n\n  get correctAnswers(): number {\n    if (!this.quizSession) return 0;\n    return Array.from(this.quizSession.answers.values()).reduce(\n      (acc, answer) => (answer.isCorrect ? acc + 1 : acc),\n      0\n    );\n  }\n}\n\nexport const QuizStore = new QuizStoreImpl();\n\n//Create a test quiz. Only temporary for mock data.\nconst testQuiz1: Quiz = {\n  id: 1,\n  title: \"DevOps quizzen\",\n  category: \"DevOps\",\n  description: \"En quiz om DevOps\",\n  createdBy: 1,\n  questions: [\n    {\n      description: \"Hvilket problem forsøger DevOps at løse?\",\n      options: [\n        {\n          text: \"Lange deployment cycles\",\n          isCorrect: false,\n        },\n        {\n          text: \"Skrøbelig infrastruktur og applikationskode\",\n          isCorrect: false,\n        },\n        {\n          text: \"Ineffektive eller uddaterede applikationer\",\n          isCorrect: false,\n        },\n        {\n          text: \"Alle ovenstående\",\n          isCorrect: true,\n        },\n      ],\n    },\n    {\n      description: \"nyt spørgsmål\",\n      options: [\n        {\n          text: \"test\",\n          isCorrect: false,\n        },\n        {\n          text: \"test2\",\n          isCorrect: true,\n        },\n      ],\n    },\n  ],\n};\n  const testQuiz2: Quiz = {\n    id: 2,\n    title: \"DevOps quizzen\",\n    category: \"DevOps\",\n    description: \"En quiz om DevOps\",\n    createdBy: 1,\n    questions: [\n      {\n        description: \"Hvilket problem forsøger DevOps at løse?\",\n        options: [\n          {\n            text: \"Lange deployment cycles\",\n            isCorrect: false\n          },\n          {\n            text: \"Skrøbelig infrastruktur og applikationskode\",\n            isCorrect: false\n          },\n          {\n            text: \"Ineffektive eller uddaterede applikationer\",\n            isCorrect: false\n          },\n          {\n            text: \"Alle ovenstående\",\n            isCorrect: true\n          }\n        ]\n      },\n      {\n          description: \"nyt spørgsmål\",\n          options: [\n              {\n                  text: \"test\",\n                  isCorrect: false\n              },\n              {\n                  text: \"test2\",\n                  isCorrect: true\n              }\n          ]\n      }\n    ]\n  }\n  const testQuiz3: Quiz = {\n    id: 3,\n    title: \"DevOps quizzen\",\n    category: \"DevOps\",\n    description: \"En quiz om DevOps\",\n    createdBy: 1,\n    questions: [\n      {\n        description: \"Hvilket problem forsøger DevOps at løse?\",\n        options: [\n          {\n            text: \"Lange deployment cycles\",\n            isCorrect: false\n          },\n          {\n            text: \"Skrøbelig infrastruktur og applikationskode\",\n            isCorrect: false\n          },\n          {\n            text: \"Ineffektive eller uddaterede applikationer\",\n            isCorrect: false\n          },\n          {\n            text: \"Alle ovenstående\",\n            isCorrect: true\n          }\n        ]\n      },\n      {\n          description: \"nyt spørgsmål\",\n          options: [\n              {\n                  text: \"test\",\n                  isCorrect: false\n              },\n              {\n                  text: \"test2\",\n                  isCorrect: true\n              }\n          ]\n      }\n    ]\n  }\n\n\n  //Add test quiz to store. Only temporary for mock data.\n  QuizStore.addQuiz(testQuiz1);\n  QuizStore.addQuiz(testQuiz2);\n  QuizStore.addQuiz(testQuiz3);","import { Button, Stack, Text } from \"@chakra-ui/react\";\nimport { FC, useMemo } from \"react\";\nimport { useColors } from \"../../hooks/useColors\";\nimport { QuestionOption } from \"../../model/questionOption\";\n\ninterface optionProps {\n  option: QuestionOption;\n  answer: QuestionOption | undefined;\n  onClick: (answer: QuestionOption) => void;\n  i: number;\n}\n\nconst Option: FC<optionProps> = ({ answer, option, onClick, i }) => {\n  const { optionBg, optionBgHover, optionCorrect, optionIncorrect } =\n    useColors();\n\n  const alpha = Array.from(Array(26)).map((e, i) => i + 65);\n  const alphabet = alpha.map((x) => String.fromCharCode(x));\n\n  const bgColor = useMemo(\n    () =>\n      !answer\n        ? optionBg\n        : option.isCorrect\n        ? optionCorrect\n        : answer === option\n        ? optionIncorrect\n        : optionBg,\n    [answer, option, optionBg, optionCorrect, optionIncorrect]\n  );\n\n  return (\n    <Button\n      bg={bgColor}\n      _hover={!answer ? { backgroundColor: optionBgHover } : {}}\n      fontWeight=\"normal\"\n      justifyContent=\"start\"\n      onClick={(e) => onClick(option)}\n    >\n      <Stack\n          direction={\"row\"}\n          spacing={6}>\n        <Text>{alphabet[i]}</Text>\n        <Text>{option.text}</Text>\n      </Stack>\n    </Button>\n  );\n};\n\nexport default Option;\n","import { Heading, Stack } from \"@chakra-ui/react\";\nimport { observer } from \"mobx-react-lite\";\nimport { FC, useCallback } from \"react\";\nimport { Question } from \"../../model/question\";\nimport { QuestionOption } from \"../../model/questionOption\";\nimport { QuizStore } from \"../../stores/quizStore\";\nimport Option from \"./optionComponent\";\n\ninterface questionProp {\n  question: Question;\n}\n\nconst QuestionComponent: FC<questionProp> = observer(({ question }) => {\n  const answer = QuizStore.quizSession?.answers.get(question);\n\n  const handleAnswer = useCallback(\n    (option: QuestionOption) => {\n      !answer && QuizStore.answerQuestion(question, option);\n    },\n    [question, answer]\n  );\n\n  return (\n    <div>\n      <Heading size=\"md\">{question.description}</Heading>\n      <Stack spacing={4}>\n        {question.options.map((option, i) => (\n          <Option\n            option={option}\n            answer={answer}\n            onClick={handleAnswer}\n            i={i}\n          />\n        ))}\n      </Stack>\n    </div>\n  );\n});\n\nexport default QuestionComponent;\n","import {Box, HStack, Text, VStack, Button, Stack, Center} from '@chakra-ui/react';\nimport {FC} from 'react';\nimport {Link} from \"react-router-dom\";\n\ninterface completionProp {\n    correctAnswers: number,\n    questionAmount: number,\n    quizName?: string\n}\n\nconst QuizCompletion: FC<completionProp> = ({correctAnswers, questionAmount, quizName}) => {\n    return (\n        <Box>\n            <Text align={\"center\"}>{quizName}</Text>\n            <Text mt={75} align={\"center\"}>Tillykke du er færdig</Text>\n            <Text mt={100} align={\"center\"}>{correctAnswers}/{questionAmount} korrekte svar</Text>\n            <Center mt={150}>\n                <Link to={\"/\"}><Button>Afslut Quiz</Button></Link>\n            </Center>\n        </Box>\n    )\n}\n\nexport default QuizCompletion;\n","import {Button} from \"@chakra-ui/button\";\nimport {Heading, HStack, Stack, Text} from \"@chakra-ui/layout\";\nimport {observer} from \"mobx-react-lite\";\nimport {FC, useCallback, useEffect, useMemo, useState} from \"react\";\nimport {QuizStore} from \"../../stores/quizStore\";\nimport QuestionComponent from \"./questionComponent\";\nimport QuizCompletion from \"./quizCompletion\";\n\nconst QuizComponent: FC = observer(() => {\n    const quiz = QuizStore.getQuiz(1); //TODO: quiz id should be read from route\n\n    if (!quiz) return <></>; //TODO: Render something that indicates the quiz cannot be found\n\n    useEffect(() => {\n        QuizStore.newQuizSession(quiz);\n    }, [quiz]);\n\n    const [question, setQuestion] = useState(quiz?.questions[0]);\n\n    const currentQuestionIndex = useMemo(\n        () => quiz?.questions.findIndex((q) => q === question) ?? 0,\n        [quiz, question]\n    );\n\n    const [isQuizCompleted, setIsQuizCompleted] = useState(false);\n\n    const [showCompletePage, setShowCompletePage] = useState(false);\n\n    const changeQuestion = useCallback(\n        (index: number) => {\n            quiz?.questions[index] && setQuestion(quiz.questions[index]);\n\n            if (index == quiz.questions.length - 1) setIsQuizCompleted(true)\n        },\n        [quiz, setQuestion]\n    );\n\n    if (showCompletePage) return <QuizCompletion questionAmount={quiz.questions.length} correctAnswers={QuizStore.correctAnswers} quizName={quiz.title}/>\n\n    return (\n        <>\n            {quiz && question && (\n                <Stack>\n                    <Heading size=\"md\">{quiz.title}</Heading>\n                    <QuestionComponent question={question}/>\n                    <Text>{`Question ${currentQuestionIndex + 1}/${\n                        quiz.questions.length\n                    }`}</Text>\n                    <Text>{QuizStore.correctAnswers} correct</Text>\n                    <HStack>\n                        <Button onClick={() => changeQuestion(currentQuestionIndex - 1)}>\n                            Previous\n                        </Button>\n                        {isQuizCompleted ?\n                            <Button onClick={() => setShowCompletePage(true)}>\n                            Afslut\n                        </Button> : <Button onClick={() => changeQuestion(currentQuestionIndex + 1)}>\n                            Next\n                        </Button> }\n                    </HStack>\n                </Stack>\n            )}\n        </>\n    );\n});\n\nexport default QuizComponent;\n","import { FC } from 'react';\nimport { useParams } from 'react-router';\nimport BasicLayout from '../components/layouts/basicLayout';\nimport QuizComponent from '../components/quiz/quizComponent';\nimport QuizSelection from '../components/quiz/QuizSelection/quizSelection';\nimport { QuizStore } from '../stores/quizStore';\n\ntype QuizPageProps = {\n  quizId: string\n}\n\nconst QuizPage: FC = () => {\n\n  // get URL param \n  // Component should handle what happens based on the given parameter\n  // If no parameter is given in the URL quizId will be undefined\n  const { quizId } = useParams<QuizPageProps>();\n  console.log(\"quizId\", quizId)\n\n  return (\n    <BasicLayout>\n      <QuizComponent />\n    </BasicLayout>\n   \n  );\n}\n\nexport default QuizPage;\n","import { Text } from '@chakra-ui/layout';\nimport { FC } from 'react';\nimport BasicLayout from '../components/layouts/basicLayout';\n\n\nconst NotFoundPage: FC = () => {\n\n  return (\n\n    <BasicLayout>\n     <Text>404 Page not found</Text>\n    </BasicLayout>\n   \n  );\n}\n\nexport default NotFoundPage;\n","import { Box, Flex, Heading, List, ListItem, Stack } from '@chakra-ui/layout';\nimport { observer } from 'mobx-react-lite';\nimport { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useColors } from '../../../hooks/useColors';\nimport {Quiz} from \"../../../model/quiz\";\n\ninterface Props {\n    quiz: Quiz\n}\n\nconst QuizSelectionItem: FC<Props> = observer(({ quiz }) => {\n    const { headerBg, primaryColorHover } = useColors();\n\n\n    return (\n        <Link to={\"quiz/\"+quiz.id}>\n            <Box cursor=\"pointer\" _hover={{ bgColor: primaryColorHover }} width=\"250px\" h=\"fit-content\" bgColor={headerBg} m={5} p={2} borderRadius=\"md\" boxShadow=\"xl\" >\n                <Stack borderRadius={5} borderColor=\"black\" spacing={5} key={quiz.id}>\n                    <Heading size=\"md\">{quiz.title}</Heading>\n                    <List>\n                        <ListItem>Category: {quiz.category}</ListItem>\n                        <ListItem>Description: {quiz.description}</ListItem>\n                        <ListItem>Created By: {quiz.createdBy}</ListItem>\n                        <ListItem>Category By: {quiz.category}</ListItem>\n                    </List>\n                </Stack>\n            </Box>\n        </Link>\n\n    );\n});\n\nexport default QuizSelectionItem;","import { Box, Center, Heading, List, ListItem, SimpleGrid, Stack, } from '@chakra-ui/layout';\nimport { observer } from 'mobx-react-lite';\nimport { FC } from 'react';\nimport { QuizStore, QuizStoreImpl } from '../../../stores/quizStore';\nimport QuizSelectionItem from './quizSelectionItem';\n\n\nconst QuizSelection: FC = observer(() => {\n\n    return (\n        <Box height=\"full\" width=\"full\" justifyContent=\"center\" >\n            <Heading>Select a quiz</Heading>\n            <SimpleGrid width=\"full\" minChildWidth=\"240px\" spacing=\"10px\" >\n                {QuizStore.quizes.map(quiz => (\n                    <Center>\n                        <QuizSelectionItem key={quiz.id} quiz={quiz} />\n                    </Center>\n                ))}\n                {QuizStore.quizes.map(quiz => (\n                    <Center>\n                        <QuizSelectionItem key={quiz.id} quiz={quiz} />\n                    </Center>\n                ))}\n                {QuizStore.quizes.map(quiz => (\n                    <Center>\n                        <QuizSelectionItem key={quiz.id} quiz={quiz} />\n                    </Center>\n                ))}\n                {QuizStore.quizes.map(quiz => (\n                    <Center>\n                        <QuizSelectionItem key={quiz.id} quiz={quiz} />\n                    </Center>\n                ))}\n\n            </SimpleGrid>\n        </Box>\n    );\n});\n\nexport default QuizSelection;","import { Button } from '@chakra-ui/button';\nimport { Link } from '@chakra-ui/layout';\nimport { FC } from 'react';\nimport BasicLayout from '../components/layouts/basicLayout';\nimport QuizSelection from '../components/quiz/QuizSelection/quizSelection';\n\n\nconst Home: FC = () => {\n\n  return (\n\n    <BasicLayout>\n      <QuizSelection />\n    </BasicLayout>\n\n  );\n}\n\nexport default Home;\n","import './App.css';\nimport QuizSelection from './components/quiz/QuizSelection/quizSelection';\nimport {QuizStore} from './stores/quizStore';\nimport {FC} from 'react';\nimport QuizPage from './pages/QuizPage'\nimport NotFoundPage from './pages/NotFoundPage'\nimport HomePage from './pages/HomePage'\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\n\nconst App: FC = () => {\n    document.title = \"YouQuiz\"\n    return (\n        <HashRouter>\n            <Switch>\n                <Route exact path=\"/\" component={HomePage}/>\n                <Route exact path=\"/quiz\" component={QuizPage}/>\n                <Route exact path=\"/quiz/:quizId\" component={QuizPage}/>\n                <Route exact component={NotFoundPage}></Route>\n            </Switch>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { extendTheme, ThemeConfig } from \"@chakra-ui/react\";\n\nconst config: ThemeConfig = {\n  initialColorMode: \"light\",\n  useSystemColorMode: false,\n};\n\nconst theme = extendTheme({ config });\nexport default theme;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\";\r\nimport theme from \"./theme\";\r\n\r\nimport {BrowserRouter as Router} from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <ChakraProvider>\r\n        <ColorModeScript initialColorMode={theme.config.initialColorMode} />\r\n          <App />\r\n      </ChakraProvider>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}